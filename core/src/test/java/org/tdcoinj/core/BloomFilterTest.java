/*
 * Copyright 2012 Matt Corallo
 * Copyright 2014 Andreas Schildbach
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.tdcoinj.core;

import org.tdcoinj.params.MainNetParams;
import org.tdcoinj.wallet.KeyChainGroup;
import org.tdcoinj.wallet.Wallet;
import org.junit.Test;

import java.util.Arrays;

import static org.tdcoinj.core.Utils.HEX;
import static org.junit.Assert.*;

public class BloomFilterTest {
    private static final NetworkParameters MAINNET = MainNetParams.get();

    @Test
    public void insertSerializeTest() {
        BloomFilter filter = new BloomFilter(3, 0.01, 0, BloomFilter.BloomUpdate.UPDATE_ALL);
        
        filter.insert(HEX.decode("99108ad8ed9bb6274d3980bab5a85c048f0950c8"));
        assertTrue (filter.contains(HEX.decode("99108ad8ed9bb6274d3980bab5a85c048f0950c8")));
        // One bit different in first byte
        assertFalse(filter.contains(HEX.decode("19108ad8ed9bb6274d3980bab5a85c048f0950c8")));

        filter.insert(HEX.decode("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"));
        assertTrue(filter.contains(HEX.decode("b5a2c786d9ef4658287ced5914b37a1b4aa32eee")));
        
        filter.insert(HEX.decode("b9300670b4c5366e95b2699e8b18bc75e5f729c5"));
        assertTrue(filter.contains(HEX.decode("b9300670b4c5366e95b2699e8b18bc75e5f729c5")));
        
        // Value generated by Tdcoin Core
        assertArrayEquals(HEX.decode("03614e9b050000000000000001"), filter.unsafeTdcoinSerialize());
    }
    
    @Test
    public void insertSerializeTestWithTweak() {
        BloomFilter filter = new BloomFilter(3, 0.01, 2147483649L);
        
        filter.insert(HEX.decode("99108ad8ed9bb6274d3980bab5a85c048f0950c8"));
        assertTrue (filter.contains(HEX.decode("99108ad8ed9bb6274d3980bab5a85c048f0950c8")));
        // One bit different in first byte
        assertFalse(filter.contains(HEX.decode("19108ad8ed9bb6274d3980bab5a85c048f0950c8")));

        filter.insert(HEX.decode("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"));
        assertTrue(filter.contains(HEX.decode("b5a2c786d9ef4658287ced5914b37a1b4aa32eee")));
        
        filter.insert(HEX.decode("b9300670b4c5366e95b2699e8b18bc75e5f729c5"));
        assertTrue(filter.contains(HEX.decode("b9300670b4c5366e95b2699e8b18bc75e5f729c5")));
        
        // Value generated by Tdcoin Core
        assertArrayEquals(HEX.decode("03ce4299050000000100008002"), filter.unsafeTdcoinSerialize());
    }

    @Test
    public void walletTest() throws Exception {
        Context.propagate(new Context(MAINNET));

        DumpedPrivateKey privKey = DumpedPrivateKey.fromBase58(MAINNET, "GtLb1Yr7N4bVFC7EzMxHmHCprkZCPFfqyjdbbcodCaRNJwuyyqMz");//TDCOIN

        Address addr = LegacyAddress.fromKey(MAINNET, privKey.getKey());
        assertTrue(addr.toString().equals("TYqSZpTwyEfU3aZQNzw2FW82AGbRw9BGn6")); //TDCOIN

        KeyChainGroup group = KeyChainGroup.builder(MAINNET).build();
        // Add a random key which happens to have been used in a recent generation
        //group.importKeys(ECKey.fromPublicOnly(privKey.getKey().getPubKeyPoint()), ECKey.fromPublicOnly(HEX.decode("03cb219f69f1b49468bd563239a86667e74a06fcba69ac50a08a5cbc42a5808e99")));
        group.importKeys(ECKey.fromPublicOnly(privKey.getKey().getPubKeyPoint()), ECKey.fromPublicOnly(HEX.decode("03cb219f69f1b49468bd563239a86667e74a06fcba69ac50a08a5cbc42a5808e99")));
        Wallet wallet = new Wallet(MAINNET, group);
        wallet.commitTx(new Transaction(MAINNET, HEX.decode("0200000001bc2f3b4f06364a18881335e761918af1f6d3f86d100b63f042e8d7ed914af5b4000000006a473044022046987b171d47a60b98a9b737bb1d1cb197281f1e3fde6199ba2c83a7ba37b7b202207a9373220e8265d19c5ba1e6ed88a44713d7984f686ffa65538d99490f4b0903012102a512b22107b324b4c1110c982be6bfe476a760e03e857abcad8a41db23bfefe0fdffffff020065cd1d0000000016001435ca9afa72279e747370361d717aec0b98b9c27c6f80a92a170000001600141ce6fe12a1550e31a49379b95f5c2dbdc66610dc06340000"))); //TDCOIN
        
        // We should have 2 per pubkey, and one for the P2PK output we have
        assertEquals(5, wallet.getBloomFilterElementCount());
        
        BloomFilter filter = wallet.getBloomFilter(wallet.getBloomFilterElementCount(), 0.001, 0);
        
        // Value generated by Tdcoin Core
        assertArrayEquals(HEX.decode("082ae5edc8e51d4a03080000000000000002"), filter.unsafeTdcoinSerialize());
    }
}
